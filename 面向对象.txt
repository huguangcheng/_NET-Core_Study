1.类的概念

我们把这些具有相同属性和方法的对象进行进一步封装，抽象出来  类这个概念

类就是个模子，确定了对象应该具有的属性和方法。

对象是根据类创建出来的。

类就是一个盖大楼的图纸。对象就是盖出来的大楼。

2.this关键字

（1）代表当前类的对象

（2）在类当中显示的调用本类的构造函数  表示调用本类的其他的构造函数


3.析构函数

析构函数与构造函数相反，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统自动执行析构函数。析构函数往往用来做“清理善后”的工作（例如在建立对象时new开辟出了一片内存空间，delete会自动调用析构函数后释放内存）


当程序结束的时候，析构函数才执行。

帮助我们释放资源

~Student()
{

}

GC  Garbage Collection 垃圾回收器

4.类：是一些具有相同属性或方法的对象抽象而出来的一个模子。

类中有字段，属性，方法，构造函数，析构函数（不常用）

字段：存储数据

属性：保护字段，对字段的取值和设置进行限定

类中的成员，如果不加访问修饰符，默认都是private

属性的本质，就是两个方法

string _name;

public string Name
{
	get{return _name;}  //取值
	set{_name=value;}  //赋值
}

new的过程：（1）在内存中开辟一块空间
           （2）在开辟的空间中创建对象
	    （3）调用对象的构造函数

构造函数：对象初始化的时候执行。

静态函数  static  只能访问静态成员

this的作用：（1）指向当前的对象。
	    （2）用于调用其他的构造函数  :this（）

5.值类型和引用类型

区别：
（1）值类型和引用类型在内存上存储的地方不一样。
（2）在传递值类型和传递引用类型的时候，传递的方式不一样。

值类型传递是值拷贝，引用类型间传递是地址拷贝。

堆、栈   

值类型：常见的数值类型（比如int，short，long，double、decimal等等），枚举enum，结构体struct）

引用类型：类，接口，object，string，数组

值类型的值是存储在内存的栈当中。

引用类型是存储在内存的堆当中。

6.
一个类，只能有一个基类

在执行子类的构造函数时，会先去执行父类的构造函数。

调用虚方法时，假若被重写，调用的肯定是子类的虚方法，假若没有被重写，调用的就不是子类的虚方法。

父类类型 a=new 子类类型。在new的过程中，先去执行父类的构造函数，执行完之后，才执行子类的构造函数。完全不用担心有多个父类该去执行哪个父类，因为一个类只能有一个基类，但是可以实现多个接口，而接口是没有构造函数的。

抽象方法必须在抽象类当中，而抽象类里不一定全部是抽象方法，也可以有虚方法和普通方法。

继承父类的子类，可以重写虚方法，也可以不重写虚方法。但是必须重写父类的抽象方法。抽象类和接口是无法直接实例的，只能通过里式替换来用子类替换父类。那这个new出来的对象，调用的方法当然都是子类的。因为类型是父类类型，但是调用的方法当然都是重写的方法。如若没有重写虚方法，则调用的是父类的虚方法，如果重写了，就调用子类的虚方法。

记住，里式替换是为了子类能够替代父类，所以对象调用的方法，一切以子类重写的父类方法为准。除此之外就是能调用父类未被重写的虚方法和普通方法。若要调用子类自己的方法，则直接实例化子类即可。

7.字符串。
字符串的不可变性、

当你给一个字符串重新赋值之后，老值并没销毁，而是重新开辟一块空间存储新值。值类型变量赋值是值拷贝。比如int a=20； a=30；  内存栈上的存的值就直接变成存储为30；但若是字符串（引用类型）赋值，它将重新在内存堆中开辟一个空间，并给予新的值，内存栈上则指向新的内存地址。  旧的内存空间扔存在，但是GC会进行回收。	

当程序结束之后，GC 扫描整个内存，如果发现有的空间没有被指向（没有被利用），则立即把它销毁。

控制系统垃圾回收器（一种自动回收未使用内存的服务）

8.面试题之一个字符串为"abcdefg",如何将第一个字母改成z，要求：不直接使用赋值方式

即s="zbcdefg"不可以使用。

我们可以将字符串当做一个只读的char类型的数组

s[0]='z'  不可以，因为是只读的数组。

首先将字符串转换为真正的char数组

char[] cha=s.ToCharArray();

cha[0]='z';

s=new string(cha);

9、如何将“hello world”变成“world hello”并输出

尽管 StringBuilder 和 String 都表示字符序列，但它们的实现方式不同。 String 是不可变类型。 也就是说，出现用于修改 String 对象的每个操作实际上会创建一个新字符串。

对于执行大量字符串操作的过程（如在循环中多次修改字符串的应用程序），重复修改字符串可能会显著降低性能。替代方法是使用StringBuilder，这是一个可变字符串类

视频：字符串的方法看到：11:06














